#!/usr/bin/env node
const app = require("../app");
const http = require("http");
const mongoose = require("mongoose");
const redis = require("redis");
const port = normalizePort(process.env.PORT || "3000");

app.set("port", port);
const server = http.createServer(app);

const mongooseOptions = {
    "useNewUrlParser": true,
    "useUnifiedTopology": true
};

mongoose.connect("mongodb://localhost/hbs", mongooseOptions, (err) => {
    if (err) {
        console.error("Error connecting to db: ", err);
    } else {
        console.info("Mongodb connection successful");
    }

    app.locals.redisClient = redis.createClient();
    
    server.listen(port);
});

server.on("listening", onListening);
server.on("error", onError);

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
               ? "Pipe " + addr
               : "Port " + addr.port;
    console.info(`Listening @ ${bind}`);
}

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
             ? "Pipe " + port
             : "Port " + port;

    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}